@import "variable","mixin";
// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  floor(($gutter / 2));
  padding-right: ceil(($gutter / 2));
  @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ceil(($gutter / -2));
  margin-right: floor(($gutter / -2));
  @include clearfix;
}
.container {
	@include container-fixed;
	@media (min-width: $screen-sm-min) {width: $container-sm}
	@media (min-width: $screen-md-min) {width: $container-md}
	@media (min-width: $screen-lg-min) {width: $container-lg}
}
.row {
	@include make-row;
}
// Generator x-samll columns
@mixin make-xs-column($columns , $gutter: $grid-gutter-width) {
	position: relative;
	float: left;
	width: percentage(($columns / $grid-columns));
	padding-left: ($gutter / 2);
	padding-right: ($gutter / 2);
}
@mixin make-xs-column-offset($columns) {
	margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($columns) {
	left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($column) {
	right: percentage(($columns / $grid-columns));
}

// Generator samll columns
@mixin make-sm-column($columns , $gutter: $grid-gutter-width) {
	position: relative;
	min-height: 1px;
	padding-left: ($gutter / 2);
	padding-right: ($gutter / 2);

	@media (min-width : $screen-sm-min) {
		float: left;
		width: percentage(($columns / $grid-columns));
	}
}

@mixin make-sm-column-offset($columns) {
	@media (min-width : $screen-sm-min) {
		margin-left: percentage(($columns / $grid-columns));
	}
}
@mixin make-sm-column-push($columns) {
	@media (min-width : $screen-sm-min) {
		left: percentage(($columns / $grid-columns));
	}
}
@mixin make-sm-column-pull($columns) {
	@media (min-width : $screen-sm-min) {
		right: percentage(($columns / $grid-columns));
	}
}

// Generator medium columns
@mixin make-md-column($columns , $gutter: $grid-gutter-width) {
	position: relative;
	min-height: 1px;
	padding-left: ($gutter / 2);
	padding-right: ($gutter / 2);

	@media (min-width : $screen-md-min) {
		float: left;
		width: percentage(($columns / $grid-columns));
	}
}
@mixin make-md-column-offset($columns) {
	@media (min-width : $screen-md-min) {
		margin-left: percentage(($columns / $grid-columns));
	}
}
@mixin make-md-column-push($columns) {
	@media (min-width : $screen-md-min) {
		left: percentage(($columns / $grid-columns));
	}
}
@mixin make-md-column-pull($columns) {
	@media (min-width : $screen-md-min) {
		right: percentage(($columns / $grid-columns));
	}
}

// Generator large columns
@mixin make-lg-column($columns , $gutter: $grid-gutter-width) {
	position: relative;
	min-height: 1px;
	padding-left: ($gutter / 2);
	padding-right: ($gutter / 2);

	@media (min-width : $screen-lg-min) {
		float: left;
		width: percentage(($columns / $grid-columns));
	}
}

@mixin make-lg-column-offset($columns) {
	@media (min-width : $screen-lg-min) {
		margin-left: percentage(($columns / $grid-columns));
	}
}
@mixin make-lg-column-push($columns) {
	@media (min-width : $screen-lg-min) {
		left: percentage(($columns / $grid-columns));
	}
}
@mixin make-lg-column-pull($columns) {
	@media (min-width : $screen-lg-min) {
		right: percentage(($columns / $grid-columns));
	}
}


@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from 1 through $grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ceil(($grid-gutter-width / 2));
    padding-right: floor(($grid-gutter-width / 2));
  }
}

@mixin float-grid-column($class, $i:1, $list:".col-#{$class}-#{$i}"){
	@for $i from 1 through $grid-columns {
		$list : "#{$list} , .col-#{$class}-#{$i}"
	}
	#{$list} {
		float: left;
	}
}
@mixin calc-grid-column($index, $class , $type){
	@if ($type == width) and ($index > 0) {
		.col-#{$class}-#{$index} {
			width : percentage(($index / $grid-columns));
		}
	}
	@if ($type == offset) and ($index > 0) {
		.col-#{$class}-#{$type}-#{$index} {
			margin-left : percentage(($index / $grid-columns));
		}
	}
	@if ($type == push) and ($index > 0) {
		.col-#{$class}-#{$type}-#{$index} {
			left : percentage(($index / $grid-columns));
		}
	}
	@if ($type == pull) and ($index > 0) {
		.col-#{$class}-#{$type}-#{$index} {
			right : percentage(($index / $grid-columns));
		}
	}
}

@mixin loop-grid-columns($columns , $class , $type){
	@for $i from 1 through $columns {
		@include calc-grid-column($i,$class,$type);
	}
}

@mixin make-grid($class){
	@include float-grid-column($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}

@include make-grid-columns();
@include make-grid(xs);
@include make-grid(sm);
@include make-grid(md);
@include make-grid(lg);


@media (max-width: $screen-xs-max) {
	.xs-hidden,
	.sm-visible,
	.md-visible,
	.lg-visible
	 {
		display: none;
	}
}
@media (min-width: $screen-sm-min) {
	.xs-visible,
	.sm-hidden,
	.md-visible,
	.ls-visible
	 {
		display: none;
	}
}
@media (min-width: $screen-md-min) {
	.xs-visible,
	.sm-visible,
	.md-hidden,
	.lg-visible
	 {
		display: none;
	}
}
@media (min-width: $screen-lg-min) {
	.xs-visible,
	.sm-visible,
	.md-visible,
	.lg-hidden
	 {
		display: none;
	}
}